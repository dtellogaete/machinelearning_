# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('Data.csv')
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('Preproceso de datos/Data.csv')
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
View(dataset)
View(dataset)
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
dataset
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
dataset
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
dataset
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
View(dataset)
View(dataset)
install.packages("caTools")
library(caTools)
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
dataset
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('01 Preproceso de datos/Data.csv')
View(dataset)
View(dataset)
View(testing_set)
View(dataset)
View(dataset)
# Escalado de valores
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
# Regresión Lineal Simple
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('02 Simple Linear Regresion/Salary_Data.csv')
#dateset = dataset[, 2:3]
# Trataemiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
dataset
# Codificar las variables categóricas
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# training_set[,2:3] = scale(training_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
View(dataset)
# Regresión Lineal Simple
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('02 Simple Linear Regresion/Salary_Data.csv')
#dateset = dataset[, 2:3]
# Trataemiento de los valores NA
dataset$Age = ifelse(is.na(dataset$Age), mean(dataset$Age, na.rm = TRUE),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), mean(dataset$Salary, na.rm = TRUE),
dataset$Salary)
dataset
# Codificar las variables categóricas
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c("No", "Yes"),
labels = c(0, 1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
# training_set[,2:3] = scale(training_set[,2:3])
# testing_set[,2:3] = scale(testing_set[,2:3])
# Plantilla para el Pre Procesado de datos
# Importar el dataset
dataset = read.csv('02 Simple Linear Regression/Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
?lm
# Ajustar el modelo de rls con el conjunto de entrenamiento
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
# Predecir resultados con el conjunto de test
# - newdata los nombres deben llamarse igual que en regressor
y_pred = predict(regressor, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
install.packages('ggplot')
# Visualización de los resultados en el conjunto de entrenamiento
library(ggplot2)
regressor
# Visualización de los resultados en el conjunto de entrenamiento
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience,
y=training_set$Salary),
colour = "red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = testing_set)),
colour = "blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo 2")
# Visualización de los resultados en el conjunto de entrenamiento
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$YearsExperience,
y=training_set$Salary),
colour = "red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = testing_set)),
colour = "blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo 2")
ggplot()+
geom_point(aes(x=training_set$YearsExperience,
y=training_set$Salary),
colour = "red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = training_set)),
colour = "blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo 2")
# Visualización de los resultados en el conjuntod de testing
ggplot()+
geom_point(aes(x=testing_set$YearsExperience,
y=testing_set$Salary),
colour = "red")+
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata = testing_set)),
colour = "blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo 2")
# Visualización de los resultados en el conjuntod de testing
ggplot()+
geom_point(aes(x=testing_set$YearsExperience,
y=testing_set$Salary),
colour = "red")+
geom_line(aes(x=testing_set$YearsExperience,
y=predict(regressor, newdata = testing_set)),
colour = "blue")+
ggtitle("Sueldo vs Años de Experiencia (Conjunto de Entrenamiento)")+
xlab("Años de Experiencia")+
ylab("Sueldo 2")
# Importar el dataset
dataset = read.csv('03 Multiple Linear Regression/50_Startups.csv')
# Importar el dataset
dataset = read.csv('03 Multiple Linear Regression/50_Startups.csv')
View(dataset)
View(dataset)
# Codificar las variables categóricas
dataset$State = factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1,2,3))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(dataset)
View(dataset)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
?lm
# Ajustar el modelo de Regresion Lineal Múltiple con el Conjunto de Entrenamiento
regression = lm(formula= Profit ~ .,
data = training_set)
View(dataset)
View(dataset)
View(regression)
View(regression)
regression.summary
regression.summary()
summary(regression)
# Predecir los resultadols con el conjunto de testing
y_pred = predict(regression, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
# Construir un módelo óptimo con la elimación hacia atrás
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend
+State,
data = dataset)
summary(dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend
+State,
data = dataset)
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend,
data = dataset)
summary(regression)
reticulate::repl_python()
X = dataset.iloc[:, :-1].values
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('04 Polinomial Regression/Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[, 2:3]
View(dataset)
summary(lin_reg)
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
summary(lin_reg)
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
poly_reg = lm(formula = Salary.,
data = dataset)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlabel("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlabel("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
(lin_reg, newdata = data.frame(Level = 6.5))
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo lineal
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# Importar el dataset
dataset = read.csv('04 Polinomial Regression/Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo lineal
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
dataset$Level4 = dataset$Level^4
Level4 = 6.5^4)
# Prediccion de nuevos resultados con Regresión Polinómica
y_pred = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
