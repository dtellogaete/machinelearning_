set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(dataset)
View(dataset)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
?lm
# Ajustar el modelo de Regresion Lineal Múltiple con el Conjunto de Entrenamiento
regression = lm(formula= Profit ~ .,
data = training_set)
View(dataset)
View(dataset)
View(regression)
View(regression)
regression.summary
regression.summary()
summary(regression)
# Predecir los resultadols con el conjunto de testing
y_pred = predict(regression, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
# Construir un módelo óptimo con la elimación hacia atrás
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend
+State,
data = dataset)
summary(dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend
+State,
data = dataset)
regression = lm(formula= Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regression)
regression = lm(formula= Profit ~ R.D.Spend,
data = dataset)
summary(regression)
reticulate::repl_python()
X = dataset.iloc[:, :-1].values
# Plantilla para el Pre Procesado de Datos
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
# Importar el dataset
dataset = read.csv('04 Polinomial Regression/Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[, 2:3]
View(dataset)
summary(lin_reg)
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
summary(lin_reg)
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
poly_reg = lm(formula = Salary.,
data = dataset)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
ylab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlabel("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlabel("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
Xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylabel("Sueldo (en $)")
# Visualización del modelo polinómico
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
(lin_reg, newdata = data.frame(Level = 6.5))
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo lineal
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
# Importar el dataset
dataset = read.csv('04 Polinomial Regression/Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar modelo de regresión lineal con el conjunto de datos
lin_reg = lm(formula = Salary~.,
data = dataset)
# Ajustar modelo de regresión polinómica con el conjunto de datos
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary~.,
data = dataset)
# Visualización del modelo lineal
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(lin_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo polinómico
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = "red") +
geom_line(aes(x =dataset$Level,
y =predict(poly_reg, newdata = dataset)),
color = "blue") +
ggtitle("Predicción lineal del suelo en función del nivel del empleado")+
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Prediccion de nuevos resultados con Regresion Lineal
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
dataset$Level4 = dataset$Level^4
Level4 = 6.5^4)
# Prediccion de nuevos resultados con Regresión Polinómica
y_pred = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
dataset = read.csv('C:\Users\Daniel\Documents\GitHub\machinelearning_\05 Support Vector Regression\Position_Salaries.csv"')
dataset = read.csv('C:\Users\Daniel\Documents\GitHub\machinelearning_\05 Support Vector Regression\Position_Salaries.csv')
dataset = read.csv("C:\Users\Daniel\Documents\GitHub\machinelearning_\05 Support Vector Regression\Position_Salaries.csv")
dataset = read.csv('C:\Users\Daniel\Documents\GitHub\machinelearning_\05 Support Vector Regression\Position_Salaries.csv')
dataset = read.csv('machinelearning_\05 Support Vector Regression\Position_Salaries.csv')
dataset = read.csv('\machinelearning_\05 Support Vector Regression\Position_Salaries.csv')
dataset = read.csv('Position_Salaries.csv')
directory <- ("./05 Support Vector Regression")
dataset = read.csv('Position_Salaries.csv')
directory
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#Ajustar SVR con el conjunto de datos
#install.packages("e1071")
library(e1071)
dataset = read.csv('Position_Salaries.csv')
dataset = read.csv('05 Support Vector Regression/Position_Salaries.csv')
dataset = dataset[, 2:3]
View(dataset)
View(dataset)
#Ajustar SVR con el conjunto de datos
#install.packages("e1071")
library(e1071)
regression = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression",
kernel = "radial")
#Prediccion de nuevos resultadops con SVR
y_pred = predict(regression, newdata = data.frame(Level= 6.5))
# Visualización del modelo SVR
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
setwd("~/GitHub/machinelearning_/06 Decision Tree Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages(rpart)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset)
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = dataset$Level))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
(ggplot2)
(ggplot2)
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = dataset$Level, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages(rpart)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
setwd("~/GitHub/machinelearning_/07 Random Forest Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
install.packages("randomForest")
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages("randomForest")
library(randomForest)
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages("randomForest")
library(randomForest)
regression = randomForest(x = dataset[1],
y = dataset$Salary)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages("randomForest")
library(randomForest)
set.seed(1234)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
View(dataset)
View(dataset)
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Random Forest)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Random Forest)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
regression = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages(rpart)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
setwd("~/GitHub/machinelearning_/07 Random Forest Regression")
# Importar el dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
# Ajustar Modelo de Regresión con el Conjunto de Datos
#install.packages(rpart)
library(rpart)
regression = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicción de nuevos resultados con Regresión
y_pred = predict(regression, newdata = data.frame(Level = 6.5))
# Visualización del modelo de regresión
# install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = "red") +
geom_line(aes(x = x_grid, y = predict(regression,
newdata = data.frame(Level = x_grid))),
color = "blue") +
ggtitle("Predicción (Modelo de Regresión)") +
xlab("Nivel del empleado") +
ylab("Sueldo (en $)")
