library(class)
y_pred = knn(train = training_set[,-3],
test = testing_set[, 3],
cl = training_set[,-3],
k = 5)
y_pred = knn(train = training_set[,-3],
test = testing_set[, -3],
cl = training_set[,3],
k = 5)
training_set[,-3]
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(class)
y_pred = knn(train = training_set[,-3],
test = testing_set[, -3],
cl = training_set[,3],
k = 5)
cm = table(testing_set[, 3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[, -3],
main = 'K-NN (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/GitHub/machinelearning_/10 Support Vector Machine")
# SVM
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
classifier = svm(formula = Purchased ~ .,
data = training_set)
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set)
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-Classification",
kernel = "linear")
#install.packages("e1071")
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
y_pred
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/GitHub/machinelearning_/11 Kernel SVM")
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
View(classifier)
View(classifier)
y_pred = predict(classifier, newdata = testing_set[,-3])
View(y_pred)
View(testing_set)
View(testing_set)
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
cm
setwd("~/GitHub/machinelearning_/11 Kernel SVM")
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(e1071)
library(e1071)
classifier = naiveBayes(x = training_set[,-3],
y = training_set$Purchased)
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
View(classifier)
View(classifier)
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
dataset$Purchased = factor(dataset$Purchased,
levels = c(0,1))
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
View(dataset)
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = naiveBayes(x = training_set[,-3],
y = training_set$Purchased)
y_pred = predict(classifier, newdata = testing_set[,-3])
cm = table(testing_set[, 3], y_pred)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
#Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased,
levels = c(0,1))
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("e1071")
library(e1071)
classifier = naiveBayes(x = training_set[,-3],
y = training_set$Purchased)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
View(testing_set)
View(y_pred)
View(testing_set)
cm
setwd("~/GitHub/machinelearning_/14 Random Forest Classification")
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Ajustar el random Forest con el conjunto de entrenamiento.
install.packages("randomForest")
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el random Forest con el conjunto de entrenamiento.
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
# Random Forest Classification
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificación como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el random Forest con el conjunto de entrenamiento.
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
# Predicción de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusión
cm = table(testing_set[, 3], y_pred)
setwd("~/GitHub/machinelearning_/16 K-Means")
# Importar los datos
dataset = read.csv("Mall_Customers.csv")
dataset = read.csv("Mall_Customers.csv")
X = dataset[, 4:5]
# Método del codo
set.seed(6)
wcss = vector()
sum(kmeans(X, i))
for(i in 1:10){
sum(kmeans(X, i))
}
?kmeans
for(i in 1:10){
wcss[i] <- sum(kmeans(X, i)$withinss)
}
plot(1:10, wcss, type = 'b', main = "Método del códo",
xlab = "Número de clusters(k)", ylab = "WCSS(k)")
# Aplicar el algoritmo de k-means con k óptimo
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300)
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0)
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shades = TRUE,
color = TRUE,
labels= 2,
plotchar = FALSE,
span = TRUE)
# install.packages("cluster")
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shades = TRUE,
color = TRUE,
labels= 2,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales",
ylab = "Puntuación (1-100)")
# Visualización de los clusters
# install.packages("cluster")
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales",
ylab = "Puntuación (1-100)")
setwd("~/GitHub/machinelearning_/17 Clustering Jerárquico")
# Importar los datos del centro comercial
dataset = read.csv("Mall_Customers.csv")
View(dataset)
X = dataset[,4:5]
dendogram = hclust(dist(X, method = "euclidean"),
method = "ward.D")
plot(dendogram,
main = "Dendrograma",
xlab = "Clientes del centro comercial",
ylab = "Distancia Euclidea")
dataset = read.csv("Mall_Customers.csv")
X = dataset[,4:5]
# Utilizar el dendrograma para encontrar el número óptimo de clusters
dendogram = hclust(dist(X, method = "euclidean"),
method = "ward.D")
plot(dendogram,
main = "Dendrograma",
xlab = "Clientes del centro comercial",
ylab = "Distancia Euclidea")
# Ajustar el clustering jerárquico a nuestro dataset
hc = hclust(dist(X, method = "euclidean"),
method = "ward.D")
y_hc = cutree(hc, k = 5)
library(cluster)
clusplot(X,
y_hc,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = "Clustering de clientes",
xlab = "Ingresos anuales",
ylab = "Puntuación (1-100)")
vector = c("hola", "Chao ", "perro")
for i in vector{
print(i)
}
print(i)
vector = c("hola", "Chao ", "perro")
for (i in vector){
print(i)
}
setwd("~/GitHub/machinelearning_/18 Apriori")
# Preprocesado de datos
dataset = read.csv("Market_Basket_Optimisation.csv")
# Preprocesado de datos
dataset = read.csv("Market_Basket_Optimisation.csv")
# Preprocesado de datos
dataset = read.csv("Market_Basket_Optimisation.csv",
header = FALSE)
View(dataset)
View(dataset)
# Preprocesado de datos
install.packages("arules")
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",")
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
# Preprocesado de datos
install.packages("arules")
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv",
header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv",
sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
View(rules)
View(rules)
# Visualización de los resultados
inspect(sort(rules, by = 'lift')[1:10])
# Visualización de los resultados
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
# Visualización de los resultados
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(sort(rules, by = 'lift')[1:10])
inspect(sort(rules, by = 'lift')[1:10])
setwd("~/GitHub/machinelearning_/19 Eclat")
setwd("~/GitHub/machinelearning_/19 Eclat")
# Preprocesado de datos
# install.packages("arules")
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, minlen = 2))
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.003, minlen = 2))
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
# Visualización de los resultados
view(inspect(sort(rules, by = 'support')[1:10]))
# Visualización de los resultados
print(inspect(sort(rules, by = 'support')[1:10]))
View(rules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
View(dataset)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
View(dataset)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, minlen = 2))
View(rules)
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset,
parameter = list(support = 0.003, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
setwd("~/GitHub/machinelearning_/19 Eclat")
# install.packages("arules")
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Eclat con el dataset
rules = eclat(data = dataset,
parameter = list(support = 0.003, minlen = 2))
# Visualización de los resultados
inspect(sort(rules, by = 'support')[1:10])
# install.packages("arules")
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.4))
# Visualización de los resultados
inspect(sort(rules, by = 'lift')[1:10])
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
View(dataset)
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Entrenar algoritmo Apriori con el dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.4))
# Visualización de los resultados
inspect(sort(rules, by = 'lift')[1:10])
